{::pagebreak :/}

## Ch 8.2 Capistrano

[Capistrano](https://github.com/capistrano/capistrano/wiki) 是 37 signals 開發的一套 automate deploy tool。也是許多 Rails Developer 推薦的一套佈署工具。


也許你要問，為什麼要用工具 deploy 專案呢？那是因為佈署 application 是由數道繁瑣的手續構成。首先，Rails 佈署程式並不像 php 那樣簡單，上傳檔案成功就完事了。要佈署一個 Rails Application，你必須連到遠端 server，然後 checkout 程式碼，跑一些 migration，重開 server 生效，重開 memcached，重開 search daemon ....

這些連續動作有時候往往一閃神即是災難。

而手動 deploy 在只有一個人一台機器時還勉強說得過去。當開發人員一多或機器一多，馬上就會要了大家的命。

Capistrano 固然強大，但官方網站的文件卻讓人不易讀懂。 Bootstrappets 內建了一個已經寫好的 recipe，可以直接使用。

（放在 config/deploy.rb ）

{::pagebreak :/}

~~~~~~~~
# -*- encoding : utf-8 -*-

raw_config = File.read("config/config.yml")
APP_CONFIG = YAML.load(raw_config)

require "./config/boot"
require "bundler/capistrano"
require "rvm-capistrano"

default_environment["PATH"] = "/opt/ruby/bin:/usr/local/bin:/usr/bin:/bin"

set :application, "groupme"
set :repository,  "git@github.com:example/#{application}.git"
set :deploy_to, "/home/apps/#{application}"

set :branch, "master"
set :scm, :git

set :user, "apps"
set :group, "apps"

set :deploy_to, "/home/apps/#{application}"
set :runner, "apps"
set :deploy_via, :remote_cache
set :git_shallow_clone, 1
set :use_sudo, false
set :rvm_ruby_string, '1.9.3'

set :hipchat_token, APP_CONFIG["production"]["hipchat_token"]
set :hipchat_room_name, APP_CONFIG["production"]["hipchat_room_name"]
set :hipchat_announce, false # notify users?

role :web, "groupme.com"                          # Your HTTP server, Apache/etc
role :app, "groupme.com"                         # This may be the same as your `Web` server
role :db,  "groupme.com"   , :primary => true # This is where Rails migrations will run

set :deploy_env, "production"
set :rails_env, "production"
set :scm_verbose, true
set :use_sudo, false


namespace :deploy do

  desc "Restart passenger process"
  task :restart, :roles => [:web], :except => { :no_release => true } do
    run "touch #{current_path}/tmp/restart.txt"
  end
end


namespace :my_tasks do
  task :symlink, :roles => [:web] do
    run "mkdir -p #{deploy_to}/shared/log"
    run "mkdir -p #{deploy_to}/shared/pids"
    
    symlink_hash = {
      "#{shared_path}/config/database.yml"   => "#{release_path}/config/database.yml",
      "#{shared_path}/config/s3.yml"   => "#{release_path}/config/s3.yml",
      "#{shared_path}/uploads"              => "#{release_path}/public/uploads",
    }

    symlink_hash.each do |source, target|
      run "ln -sf #{source} #{target}"
    end
  end

end

namespace :remote_rake do
  desc "Run a task on remote servers, ex: cap staging rake:invoke task=cache:clear"
  task :invoke do
    run "cd #{deploy_to}/current; RAILS_ENV=#{rails_env} bundle exec rake #{ENV['task']}"
  end
end

after "deploy:finalize_update", "my_tasks:symlink"

~~~~~~~~
