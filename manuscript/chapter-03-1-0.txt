{::pagebreak :/}

## Ch 3.1.0 安裝 devise

### 安裝 gem

Rails 內，安裝 gem 的方式是透過 Bundler 這個工具。具體方式是修改 `Gemfile` 這個檔案，加入所需要安裝的 gem，再執行 `bundle install`，即能安裝完畢。

### 安裝 devise


[devise](https://github.com/plataformatec/devise) 是目前 Rails 界最被廣為使用的認證系統。其彈性的設計支援很多實務上的需求，如：鎖定賬號（Lockable）、需要認證（Confirmable）、取回帳號（Recoverable）、與第三方認證如 Facebook 整合（ OmniAuthable）。

在本書裡面我們使用的 Boostrappers 內建即幫我們安裝好 `devise` 這個 gem。

不過你還是可以開一個空專案，實際裝一下練習看看。


修改 `Gemfile`

~~~~~~~~~
gem 'devise'
~~~~~~~~~

使用 bundle 安裝

`bundle install`

產生必要檔案

`rails g devise:install`

產生 user model 檔案

`rails generate devise user`


#### devise 相關連結

~~~~~~~~~
  <li> <%= link_to( "Sign Up" ,new_user_registration_path) %> </li>
  <li> <%= link_to( "Login", new_user_session_path )  %> </li>   
  <li> <%= link_to("Logout",destroy_user_session_path, :method => :delete ) %> </li>
~~~~~~~~~


### devise 相關 method

1. 判斷現在使用者是否登入了，可以使用 current_user.blank?。
2. 要取現在這個登入的使用者資料，可以使用 current_user

### login_required

Boostrappers 在 `app/controller/application_controller.rb` 也先預幫開發者準備好一個 method：`login_required`。


~~~~~~~~~

  def login_required
    if current_user.blank?
      respond_to do |format|
        format.html  {
          authenticate_user!
        }
        format.js{
          render :partial => "common/not_logined"
        }
        format.all {
          head(:unauthorized)
        }
      end
    end
  
  end

~~~~~~~~~

如果開發者只是單純想限制哪一個 action 需要登入才能使用，只要掛上 before_action ，再指定即可。  


### 客製化 devise

原始的 devise 設計，只有 email 與 password 的設計，並沒有 name 的欄位。雖然 Boostrappers 幫忙也生了 name 的欄位，但是我們還是得在 devise 的註冊表單加進去 name 才行，否則註冊進去的 user 都會沒有 name。

devise 的 view 預設是隱藏起來，直接使用 gem 內的 view。要客製化必須要先使用 generator 生出來，再修改複寫。

具體的步驟是執行：

`rails g devise:views`

~~~~~~~~~
會生成一堆檔案

      invoke  Devise::Generators::SharedViewsGenerator
      create    app/views/users/shared
      create    app/views/users/shared/_links.erb
      invoke  simple_form_for
      create    app/views/users/confirmations
      create    app/views/users/confirmations/new.html.erb
      create    app/views/users/passwords
      create    app/views/users/passwords/edit.html.erb
      create    app/views/users/passwords/new.html.erb
      create    app/views/users/registrations
      create    app/views/users/registrations/edit.html.erb
      create    app/views/users/registrations/new.html.erb
      create    app/views/users/sessions
      create    app/views/users/sessions/new.html.erb
      create    app/views/users/unlocks
      create    app/views/users/unlocks/new.html.erb
      invoke  erb
      create    app/views/users/mailer
      create    app/views/users/mailer/confirmation_instructions.html.erb
      create    app/views/users/mailer/reset_password_instructions.html.erb
      create    app/views/users/mailer/unlock_instructions.html.erb
~~~~~~~~~

註冊表單是  `app/views/users/registrations/new.html.erb`

加入一行 name 使之成為

~~~~~~~~~
<h2>Sign up</h2>

<%= simple_form_for(resource, :as => resource_name, :url => registration_path(resource_name)) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <%= f.input :email, :required => true, :autofocus => true %>
    <%= f.input :name, :required => true, :autofocus => true %>
    <%= f.input :password, :required => true %>
    <%= f.input :password_confirmation, :required => true %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, "Sign up" %>
  </div>
<% end %>

<%= render "users/shared/links" %>
~~~~~~~~~