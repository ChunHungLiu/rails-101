{::pagebreak :/}

## Ch 3.1.3 讓 Post 與 User 產生關聯：


新增一條 migration： `rails g migration add_user_id_to_post`

~~~~~~~~~
      invoke  active_record
      create    db/migrate/20130531153435_add_user_id_to_post.rb
~~~~~~~~~

填入以下內容

~~~~~~~~~
class AddUserIdToPost < ActiveRecord::Migration
  def change
    add_column :posts, :user_id, :integer
  end
end

~~~~~~~~~


執行 `rake db:migrate`

~~~~~~~~~
==  AddUserIdToPost: migrating ================================================
-- add_column(:posts, :user_id, :integer)
   -> 0.0176s
==  AddUserIdToPost: migrated (0.0177s) =======================================
~~~~~~~~~


修改 `app/models/user.rb` 加入 `has_many :posts`


內容如下

~~~~~~~~~
class User < ActiveRecord::Base
  # Include default devise modules. Others available are:
  # :token_authenticatable, :confirmable,
  # :lockable, :timeoutable and :omniauthable

  has_many :groups
  has_many :posts
    
  extend OmniauthCallbacks

  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable, :omniauthable


end

{::pagebreak :/}
~~~~~~~~~


修改 `app/models/post.rb` 加入

~~~~~~~~~
  belongs_to :author, :class_name => "User", :foreign_key => :user_id

  def editable_by?(user)
    user && user == author
  end
~~~~~~~~~

內容如下：

~~~~~~~~~

class Post < ActiveRecord::Base

  belongs_to :group
  validates :content, :presence => true
  
  belongs_to :author, :class_name => "User", :foreign_key => :user_id

  def editable_by?(user)
    user && user == author
  end
  
end
~~~~~~~~~

{::pagebreak :/}

接著我們要把 Groups 的幾個 action 內容替換掉：

### create

~~~~~~~~
  def create

    @post = @group.posts.new(post_params)
    @post.author = current_user

    if @post.save 
      redirect_to group_path(@group)
    else
      render :new
    end
  end
~~~~~~~~

### edit

~~~~~~~~
  def edit
    @post = current_user.posts.find(params[:id])
  end  
~~~~~~~~


### update

~~~~~~~~
  def update

     @post = current_user.posts.find(params[:id])

    if @post.update(post_params)
      redirect_to group_path(@group)
    else
      render :edit
    end
  end
~~~~~~~~

{::pagebreak :/}


### destroy

~~~~~~~~
  def destroy

    @post = current_user.posts.find(params[:id])

    @post.destroy

    redirect_to group_path(@group)
  end
~~~~~~~~

把 app/views/groups/show.html.erb 的內容換掉

~~~~~~~~

<div class="span12">

 <% if current_user && @group.editable_by?(current_user) %>
 <div class="group pull-right">

  <%= link_to("Edit", edit_group_path(@group) , :class => "btn btn-mini ")%> 

  <%= link_to("New Post", new_group_post_path(@group) , :class => "btn btn-mini btn-primary")%>
  &nbsp;  
  </div>
  <% end %>
<h2> <%= @group.title %> </h2> 

<p> <%= @group.description %> </p> 


<table class="table">

  <tbody>
    <% @posts.each do |post| %> 
    <tr>
      <td> 

        <span clas="author"> <strong> Author : <%= post.author.name %> </strong> </span>
        <p>
        <%= post.content %> 
      </p>
      </td>

       <% if current_user && post.editable_by?(current_user) %>
      <td> <%= link_to("Edit", edit_group_post_path(post.group, post), :class => "btn btn-mini")%>
        <%= link_to("Delete", group_post_path(post.group, post), :class => "btn btn-mini", :method => :delete, :confirm => "Are you sure?" ) %> </td>
      </tr>
      <% end %>
      <% end %> 
    </tbody>
  </table>
</div>

~~~~~~~~
